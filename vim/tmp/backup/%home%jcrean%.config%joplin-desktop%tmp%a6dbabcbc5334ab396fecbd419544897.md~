Kubernetes

# Kubernetes
---


* Pods: Containers are placed into pods to be managed by Kubernetes.

* Labels and selectors: Key-value pairs used to identify and group resources within Kubernetes.
   
* Controllers: A reconciliation loop that drives actual cluster state toward the desired cluster state.
	
* Services: A way to identify elements used by applications (name-resolution, caching, etc.).

* Kubernetes control plane: Main controlling unit of the cluster that manages workload and directs communication across the system.

* etcd: Persistent, lightweight, distributed key-value data store.

* API server: Serves the Kubernetes API using JSON over HTTP.

* Scheduler: Pluggable component that selects which node a pod should run on based on resource availability.

* Controller manager: The process that runs the Kubernetes controllers such as DaemonSet and Replication.

* Kublet: Responsible for the running state of each node (starting, stopping, and maintaining application containers)

* Kube-proxy: The implementation of a network proxy and load balancer that supports the service abstraction.

* cAdvisor: An agent that monitors and gathers resource usage.



## Intro
---


- I have 3 physical host I am going to setup Kubernetes on. My master node is going to be a Debian box that I also and running a zfs data store on. I plan on fiding a better solution for my storage but that is for another day.
* My second node will be a Centos 7 box with 40Gb of ram.
* The third box in the cluster is antoher kvm host with 125Gb of ram. Dont ask me why I have so much ram but I got a good deal on it while back.


## K8s on debian
---


### Open the firewall


```
ufw allow {6443,2379:2380,10250,10251,10252,10255,30000:32767}
```

### Install the repo key and configure the repo. Also freeze the version of kubernetes to insure you don't run into problems down the road.

```

```

```
apt-get update && apt-get install -y apt-transport-https curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
apt-get update
apt-get install -y kubelet kubeadm kubectl
apt-mark hold kubelet kubeadm kubectl
```

```
cat /etc/docker/daemon.json 
{
          "data-root": "/home/docker"
          "exec-opts: ["native.cgroupdriver=systemd"]
}

```


### Enable the hosts firewall for the bridge network

```
cat <<EOF > /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

modprobe br_netfilter
sysctl net.bridge.bridge-nf-call-iptables=1
sysctl net.bridge.bridge-nf-call-ip6tables=1

```

### Create the master node and setup the pod network for your flanneld

```
kubeadm init --pod-network-cidr=10.244.0.0/16
```

### Copy over the kubectl admin configs to your user di

```
mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config
```


### Get all of the running containers

```
â””> kubectl get pods --all-namespaces

NAMESPACE     NAME                           READY     STATUS    RESTARTS   AGE
kube-system   coredns-78fcdf6894-ckdtr       0/1       Pending   0          31m
kube-system   coredns-78fcdf6894-mvgmk       0/1       Pending   0          31m
kube-system   etcd-kvm0                      1/1       Running   0          30m
kube-system   kube-apiserver-kvm0            1/1       Running   0          30m
kube-system   kube-controller-manager-kvm0   1/1       Running   0          30m
kube-system   kube-proxy-gfmgf               1/1       Running   0          31m
kube-system   kube-scheduler-kvm0            1/1       Running   0          30m
```

* On the master configure the flannel network
* 

http://www.chunqi.li/2015/11/15/Battlefield-Calico-Flannel-Weave-and-Docker-Overlay-Network/

* I chose to use flannel for my home lab install it implaments VxLan on the backend. it seems to be one of the most used also. Although using Calico would make life easier for doing truble shooting as this is a pure layer 3 approach and is not considered a overlay network.


```
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml

```

## k8s Centos7
---


### Install Repos



```
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
```


### Disable Selinux

```
setenforce 0
yum install -y ebtables ethtool docker kubelet kubeadm kubectl
sed 's/'
```

### Install Docker


```
systemctl enable docker && systemctl start docker
systemctl enable kubelet && systemctl start kubelet

```
### Docker Setup


```
{
    "data-root": "home/docker",
    "storage-driver": "overlay2",
    "storage-opts": [ "overlay2.override_kernel_check=true"],
    "exec-opts": [ "native.cgroupdriver=systemd" ],
    "iptables": false
}
```

### Openfirewall ports on the master


```
firewall-cmd --zone=public --add-port=6443/tcp --permanent
firewall-cmd --zone=public --add-port=80/tcp --permanent
firewall-cmd --zone=public --add-port=443/tcp --permanent
firewall-cmd --zone=public --add-port=18080/tcp --permanent
firewall-cmd --zone=public --add-port=10254/tcp --permanent
firewall-cmd --reload

#TODO: figure out how to make this work with libvirtd

```

### Enable br_netfilter to send bridge traffic though firewall


```
cat <<EOF > /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

modprobe br_netfilter
sysctl net.bridge.bridge-nf-call-iptables=1
sysctl net.bridge.bridge-nf-call-ip6tables=1
```

### K8s run Setup


```
kubeadm init --pod-network-cidr=10.244.0.0/16

```


## Creating the k8s Dashboard

### clone the repos and launch the pods

```
git clone https://github.com/kubernetes/heapster.git
cd heapster
kubectl create -f deploy/kube-config/influxdb/
kubectl create -f deploy/kube-config/rbac/heapster-rbac.yaml
```


## Useful commands
---

[Kubernetes CheatSheets](:/264a53ab4bab47e1adf0407ff74dfedd)

### List the join token
`kubeadm token list`

### Regenerate the discovery-token-ca-cert-hash

`openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | \
   openssl dgst -sha256 -hex | sed 's/^.* //'`
   

### Get all of the deployments

`kubectl get deployments --all-namespaces`

### Delete a deployment

`kubectl delete deployment <name> --namespace=kube-system`

### Delete a pod in the root name space

`kubectl delete pod <pod> --namespace=kube-system`




